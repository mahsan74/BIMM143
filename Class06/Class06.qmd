---
title: "Class06: R Functions "
author: Mahsa Naeimi
format: pdf
date: 2023-04-21
editor_options: chunk_output_inline
---

In this class we will develop our own R functions to calculate average grades in a fictional class

we will start with simplified version of the problem, just calculating the average grade of one student.

# Simplified version

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

WE are going to start by calculating the average score of the homeworks.

```{r}
mean(student1)
```

To get the minimum score we can use which.min.

```{r}
student1
which.min(student1)
```

I can do the average of the fisrt 7 homework scores:

```{r}
mean(student1[1:7])
```

Another way to select the first 7 homeworks:

```{r}
student1[1:7]
student1[-8]
```

Another way to drop the lowest score:

we can assign student1 to a variable to get the mean.

```{r}
student1_drop_lowest = student1 [-which.min(student1)]
student1_drop_lowest
```

I can get the mean of the homework scores after dropping the lowest score by doing:

```{r}
mean(student1_drop_lowest)
```

we have our first working snippet of code!

Student2:

Let's generalize student2:

```{r}
student2 
```

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student2_drop_lowest = student2 [-which.min(student2)]
student2_drop_lowest
```

There is a way to calculate the mean dropping missing values (or NA)

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
mean(student2, na.rm = TRUE)
```

the looks good for student2. however for student3...

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
mean(student3, na.rm = TRUE)
```

we want to know the position of the NAs. so for student2 we can use the following:

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
which(is.na(student2))
```

position 2 is NA in student2.

for student3:

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
which(is.na(student3))
```

For considering missing values we can mask the NA values with zeros.

```{r}
which(is.na(student2))
```

```{r}
 student2[which(is.na(student2))]
```

now we want to change NA to zero

```{r}
  student2[which(is.na(student2))] <- 0
  student2
```

For student3:

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
 student3[which(is.na(student3))] <- 0
 student3
 
```

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
 mean(student3)
```

This is going to be our final working snippet of code for all students (with and without NA values)

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
student3[is.na(student3)] <-0
student3_drop_lowest <- student3[-which.min(student3)]
  mean(student3_drop_lowest)

```

```{r}
x <- c(100,75,50,NA)
x[is.na(x)] <-0
x_drop_lowest <- x[-which.min(x)]
  mean(x_drop_lowest)
```

### Q1. Function Grade

we can write it as a function:

```{r}
#'  Calculate the average score for a vector of homework scores,
#'  dropping the lowest score, 
#'  and considering NA values as zeros.
#'
#' @param x A numeric vextor of homwwork scores
#'
#' @return The average value of homework scores
#' @export
#'
#' @examples 
#' student1 <- c('100', '50', NA)
#' grade(student)
#' 
grade <- function(x){
  # mask NA values with zero
  x[is.na(x)] <- 0
  # dropping the lowest score
  x_drop_lowest <- x[-which.min(x)]
  mean(x_drop_lowest)
  }
```

Let's apply the function

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)

grade(student1)
grade(student2)
grade(student3)
```

let's apply our function to a gradebook from this URL:

"https://tinyurl.com/gradeinput"

```{r}
 URL <- "https://tinyurl.com/gradeinput" 
gradebook <- read.csv(URL, row.names = 1)
head(gradebook)
```

let's apply my function `grade` to the gradebook using `apply` and running it by rows using `MARGIN=1`

```{r}
apply(gradebook, 1, grade)
```

### Q2. Using your `grade()` function and the supplied gradebook, Who is the top scoring student overall in the gradebook?

```{r}
max(apply(gradebook,1, grade))
```

the max score is 94.5

```{r}
which.max(apply(gradebook,1, grade))
```

the student getting max score was student 18.

### Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall?

FIrst we aer going to mask NA values with zeros

```{r}
is.na(gradebook) 
```

```{r}
gradebook[is.na(gradebook)] <-0
```

Then, we apply the mean function to the gradebook/

```{r}
apply(gradebook, 2, mean)
```

The toughest homework will be hw2 considering the mean, and considering missing homework as 0.

Maybe having zeros for missing homework is too strict and is not a good representation of the homework difficulty.

One thing we can do is remove the missing value.

```{r}
 gradebook <- read.csv(URL, row.names = 1)
 apply(gradebook, 2, mean, na.rm =TRUE)
```

Instead of assigning zeros to missing values if we directly don't consider missing value the toughest homework will be hw3 (according to the mean).

If we use the median of the mean as a measure of overal score....

```{r}
apply(gradebook, 2, median, na.rm = TRUE)
```

If we use some plot...

```{r}
boxplot(gradebook)
```

### Q4. From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)?

```{r}
 overall_grades = apply(gradebook, 1, grade)
 overall_grades
```

```{r}
# for column use $
gradebook$hw1
```

calculate correlation:

```{r}
 cor(gradebook$hw1, overall_grades)
```

```{r}
apply(gradebook, 2, cor, y = overall_grades)
```

Let's change NA for zeros:

```{r}
 gradebook [is.na(gradebook)] <- 0
 apply(gradebook, 2, cor, y = overall_grades)
 
```

The max value is...

```{r}
 which.max(apply(gradebook, 2, cor, y = overall_grades))
```

### Q5. Make sure you save your Quarto document and can click the "Render" (or Rmarkdown"Knit") button to generate a PDF format report without errors. Finally, submit your PDF to gradescope.
